-- Address decode logic for ipbus fabric
--
-- This file has been AUTOGENERATED from the address table - do not hand edit
--
-- We assume the synthesis tool is clever enough to recognise exclusive conditions
-- in the if statement.
--
-- Dave Newbold, February 2011

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use ieee.numeric_std.all;
use work.ipbus.all;

package ipbus_addr_decode is

  function ipbus_addr_sel(signal addr : in std_logic_vector(31 downto 0)) return integer;

end ipbus_addr_decode;

package body ipbus_addr_decode is
  
  function ipbus_addr_sel(signal addr : in std_logic_vector(31 downto 0)) return integer is
    variable sel : integer;
  begin
                -- START automatically  generated VHDL the Thu Oct  3 22:14:09 2013 
		if    std_match(addr, "-----------00-00-0--000-0000000-") then
			sel := 0; -- ctrl.id / base 0x00000000 / mask 0x00014efe
		elsif std_match(addr, "-----------00-00-0--000-0000001-") then
			sel := 1; -- ctrl.csr / base 0x00000002 / mask 0x00014efe
 		elsif std_match(addr, "------------0-00-0--000-000001--") then
 			sel := 2; -- ctrl.buf_test / base 0x00000004 / mask 0x00014efe
--		elsif std_match(addr, "-----------00-00-0--000-0000011-") then
--			sel := 3; -- ctrl.xpoint / base 0x00000006 / mask 0x00014efe
		elsif std_match(addr, "-----------00-00-0--000-00001---") then
			sel := 4; -- ctrl.i2c_clk / base 0x00000008 / mask 0x00014efe
		elsif std_match(addr, "-----------00-00-0--000-00010---") then
			sel := 5; -- ctrl.i2c_top / base 0x00000010 / mask 0x00014efe
		elsif std_match(addr, "-----------00-00-0--000-00011---") then
			sel := 6; -- ctrl.i2c_bot / base 0x00000018 / mask 0x00014efe
		elsif std_match(addr, "-----------00-00-0--000-00100---") then
			sel := 7; -- mgt_align / base 0x00000020 / mask 0x00014efe
		elsif std_match(addr, "-----------00-00-0--000-01000---") then
			sel := 8; -- ttc.ttc / base 0x00000040 / mask 0x00014efe
		elsif std_match(addr, "-----------00-00-0--000-0100100-") then
			sel := 9; -- ttc.ttc_freq / base 0x00000048 / mask 0x00014efe
		elsif std_match(addr, "-----------00-00-0--000-0100101-") then
			sel := 10; -- ttc.ttc_hist_buf / base 0x0000004a / mask 0x00014efe
		elsif std_match(addr, "-----------00-00-0--000-10------") then
			sel := 11; -- mgt / base 0x00000080 / mask 0x00014efe
		elsif std_match(addr, "-----------00-00-0--001---------") then
			sel := 12; -- mgt_drp.chan_drp / base 0x00000200 / mask 0x00014efe
		elsif std_match(addr, "-----------00-00-0--010---------") then
			sel := 13; -- mgt_drp.com_drp / base 0x00000400 / mask 0x00014efe
		elsif std_match(addr, "-----------00-00-0--100-00000---") then
			sel := 14; -- demux.csr / base 0x00000800 / mask 0x00014efe
		elsif std_match(addr, "-----------00-00-1--------------") then
			sel := 15; -- pp_ctrl.pp / base 0x00004000 / mask 0x00014efe
		elsif std_match(addr, "-----------00-01-0--000-00000---") then
			sel := 16; -- buffers.csr / base 0x00010000 / mask 0x00014efe
		
		-- New buffer sys with data valid recorded
		elsif std_match(addr, "-----------00-01-0--000-000010--") then
			sel := 17; -- buffers.buffers / base 0x00010008 / mask 0x00014efe
		
		-- Old buffer sys without data valid
		-- elsif std_match(addr, "------------0-10----------------") then
		-- 	sel := 17; -- buffers.buffers / base 0x00020000 / mask 0x00014efe			

		elsif std_match(addr, "-----------01-------------------") then
			sel := 18; -- gct / base 0x00080000 / mask 0x00014efe		
--     elsif std_match(addr, "-----------1--------------------") then
--       sel := 19; -- microcontroller / base 0x00100000 / mask 0x00014efe   
			
    else
      sel := 99;
    end if;
    return sel;
  end ipbus_addr_sel;
                
end ipbus_addr_decode;

