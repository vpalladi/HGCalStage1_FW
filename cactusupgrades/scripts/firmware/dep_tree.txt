Usage:

dep_tree.py [-h] [-v] [-p P] [-m component_map]
                   repos_root top_dir [top_depfile]

Parse design dependency tree and generate build scripts and other useful files

positional arguments:
  repos_root        repository root
  top_dir           top level design directory
  top_depfile       top level dep file

optional arguments:
  -h, --help        show this help message and exit
  -v                verbosity
  -p P              output product: x (xtclsh script); s (Modelsim script); c
                    (component list}; a (address table list); b (address
                    decoder script); f (flat file list)
  -m component_map  location of component map file
  
  default: nothing is done
  
---

Repository layout in each component / top-level area:

firmware/cfg: contains .dep files and project config files
firmware/hdl: contains source files
firmware/cgn: contains XCO core build files
/addr_table: contains uHAL address table XML files

---

.dep file format

# Comment line

common options:

	-c component_name: look under different component to find referenced file 
	-d: descend a level in dir tree to find referenced file
	-s dir: look in subdir path to find referenced file

include [dep_file_list]

	default is to take file component_name.dep
	
setup [tcl_file_list]

	default is to take file component_name.tcl

src [-l library] [-g] [-n] src_file_list

	src_file_list under firmware/hdl by default; may contain glob patterns
	-g: find 'generated' src in ipcore directory
	-n: for XCO files, build but don't include 

addrtab [-t] [file_list]

	default is to reference file component_name.xml
	-i: top-level address table file

---

component_map file format

logical_name physical_dir

	The 'physical_dir' is relative to the trunk/

