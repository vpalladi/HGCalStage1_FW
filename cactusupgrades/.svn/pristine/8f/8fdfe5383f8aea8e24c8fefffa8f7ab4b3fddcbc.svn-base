from __future__ import print_function
import time, os

from SmartOpen import SmartOpen
from DepFileParser import DepFileParser
from CommandLineParser import CommandLineParser
from Pathmaker import Pathmaker

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class XtclshScriptWriter( object ):
  def __init__( self , aCommandLineArgs , aPathmaker ):
    self.CommandLineArgs = aCommandLineArgs
    self.Pathmaker = aPathmaker
 
  def write( self , aScriptVariables , aComponentPaths , aCommandList , aLibs ):

    if not "device_name" in aScriptVariables:
      raise RuntimeError("Variable 'device_name' not defined.")
      
    with SmartOpen( self.CommandLineArgs.output ) as write:
    
      write("# Autogenerated project build script")
      write( time.strftime("# %c") )
      write(  )
      write("project new top")
      
      write("project set family {0}".format( aScriptVariables[ "device_family" ] ) )
      write("project set device {0}".format( aScriptVariables[ "device_name" ] ) )
      write("project set package {0}".format( aScriptVariables[ "device_package" ] ) )
      write("project set speed {0}".format( aScriptVariables[ "device_speed" ] ) )
      
      for setup in aCommandList["setup"]:
        write( "source {0}".format( setup.FilePath ) )
        
      for lib in aLibs:
        write( "lib_vhdl new {0}".format( lib ) )
          
      for src in reversed( aCommandList["src"] ):
        if os.path.splitext( src.FilePath )[1] == ".xco":
          if not len( aCommandList[ "cgpfile" ] ):
            raise SystemExit("No CGP file found in design")
          write("exec mkdir -p ipcore_dir")
          write("exec cp {0} {1}".format( aCommandList[ "cgpfile" ][0].FilePath , "ipcore_dir" ) )
          write("exec cp {0} {1}".format(  src.FilePath , "ipcore_dir" ) )
          write("cd ipcore_dir")
          write("exec coregen -r -b {0} -p coregen.cgp >& coregen.out".format( os.path.basename(src.FilePath) ) )
          write("cd ..")
          lFile = os.path.join( "ipcore_dir" , os.path.basename(src.FilePath) )
        else:
          lFile = src.FilePath
          
        if src.Include:
          if src.Lib is None:
            write("xfile add {0}".format( lFile ) )
          else:
            write("xfile add {0} -lib_vhdl {1} -include_global".format( lFile , src.Lib ) )
            
      write("project set top rtl top")
      write("project close")
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
